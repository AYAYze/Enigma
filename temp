class Rotor {
    private memory : {
        rotor : Array<string>,
        selectRotor : Array<string>,
        rotateFlag : Array<string>,
        notch : Array<number>,
        encodeRotor : Array<string>
    } = {
        rotor : [
            "EKMFLGDQVZNTOWYHXUSPAIBRCJ",
            "AJDKSIRUXBLHWTMCQGZNPYFVOE",
            "BDFHJLCPRTXVZNYEIWGAKMUSQO",
            "ESOVPZJAYQUIRHXLNFTGKDCMWB",
            "VZBRGITYUPSDNHLXAWMJQOFECK",
            "JPGVOUMFYQBENHZRDKASXLICTW",
            "NZJHGRCXMYSWBOUFAIVLPEKQDT",
            "FKQHTLXOCBJSPDZRAMEWNIUYGV"
        ],
        selectRotor : [
            "0", 
            "0", 
            "0"
        ],
        rotateFlag : new Array(3),
        notch : [
            18,6,23,11,1,14,14,14
        ],
        encodeRotor : [
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "BCDEFGHIJKLMNOPQRSTUVWXYZA"
        ]
    };

    private rotor : Array<string> = [
        "EKMFLGDQVZNTOWYHXUSPAIBRCJ",
        "AJDKSIRUXBLHWTMCQGZNPYFVOE",
        "BDFHJLCPRTXVZNYEIWGAKMUSQO",
        "ESOVPZJAYQUIRHXLNFTGKDCMWB",
        "VZBRGITYUPSDNHLXAWMJQOFECK",
        "JPGVOUMFYQBENHZRDKASXLICTW",
        "NZJHGRCXMYSWBOUFAIVLPEKQDT",
        "FKQHTLXOCBJSPDZRAMEWNIUYGV"
    ]

    private selectRotor : Array<string> = [
        "0", 
        "0", 
        "0"
    ]

    private rotateFlag : Array<string> = new Array(3);

    private notch : Array<number> = [
        18,6,23,11,1,14,14,14
    ]

    private encodeRotor : Array<string> = [
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "BCDEFGHIJKLMNOPQRSTUVWXYZA"
    ]
    //로터 3개 선택
    selectRotate(rotorIn : Array<number>) : void {
        for(let i = 0; i < 3; i++){
            this.selectRotor[i] = this.rotor[rotorIn[i] - 1];
            
        }
    }
    //로터 입력받음. 3개 배열.
    selectRotateFlag(rotorIn : Array<number>) : void {
        for(let i = 0; i < 3; i++){
            let n = rotorIn[i];
            while(n - 1) {
                this.reverseRotate(this.selectRotor[i])
                
                this.rotate(this.encodeRotor[i])
                n--;
            }
            this.rotateFlag[i] = this.selectRotor[i][this.notch[i] - 1];
        }
        
    }
    //로터의 초기위치 설정, 3개요소의 배열을 입력받음.
    setFirstRoterPosition(n : Array<number>) : void {
        for(let i = 0; i < 3; i++){
            let tmp : number = n[i];
            while(tmp - 1){
                this.rotate(this.selectRotor[i]);
                tmp--;
            }
        }
    }
    plugToRotor(alpha : {text:string}) : void {
        this.rotate(this.selectRotor[2]);
        console.log('d ' + this.selectRotor[2])
        this.reverseRotate(this.encodeRotor[2]);
        if(this.selectRotor[2][0] == this.rotateFlag[2]){
            this.rotate(this.selectRotor[1]);
            this.reverseRotate(this.encodeRotor[1]);
            if(this.selectRotor[1][0] == this.rotateFlag[1]) {
                this.rotate(this.selectRotor[0]);
                this.reverseRotate(this.encodeRotor[0]);
            }
        }
        alpha.text = this.encodeRotor[2][this.selectRotor[2][alpha.text.charCodeAt(0) - 65].charCodeAt(0) - 65]
        console.log(`rotor3 : ${alpha.text}`);
        alpha.text = this.encodeRotor[1][this.selectRotor[1][alpha.text.charCodeAt(0) - 65].charCodeAt(0) - 65]
        console.log(`rotor2 : ${alpha.text}`);
        alpha.text = this.encodeRotor[0][this.selectRotor[0][alpha.text.charCodeAt(0) - 65].charCodeAt(0) - 65]
        console.log(`rotor1 : ${alpha.text}`);
    }
    reflectorToRotor(alpha : {text:string}) : void {
        alpha.text = this.encodeWord(this.selectRotor[0], this.encodeRotor[0], alpha.text)
        console.log(`rotor1 : ${alpha.text}`);
        alpha.text = this.encodeWord(this.selectRotor[1], this.encodeRotor[1], alpha.text)
        console.log(`rotor2 : ${alpha.text}`);
        alpha.text = this.encodeWord(this.selectRotor[2], this.encodeRotor[2], alpha.text)
        console.log(`rotor3 : ${alpha.text}`);
    }
    rotate(rotor : string) : void{
        for(let i = 0; i < 25; i++){
            let temp : string;
            let tempRotor = Array.from(rotor);
            temp = tempRotor[i];
            tempRotor[i] = tempRotor[i + 1];
            tempRotor[i + 1] = temp;

            rotor = tempRotor.join('');
        }
    }
    reverseRotate(rotor : string) : void{
        for(let i = 25; i > 0; i--){
            let temp : string;
            let tempRotor = Array.from(rotor);
            temp = tempRotor[i];
            tempRotor[i] = tempRotor[i - 1];
            tempRotor[i - 1] = temp;

            rotor = tempRotor.join('');
        }
    }
    encodeWord(rotor : string , encodeRotor : string, alpha : string):string {
        for(let i = 0; i < 27; i++){
            if(encodeRotor[i] == alpha) {
                for(let j = 0; j < 27; j++){
                    if(rotor[j] == String.fromCharCode(65 + i)){
                        return alpha = String.fromCharCode(65 + j);
                    }
                }
            }
        }
    }
}

export default Rotor;